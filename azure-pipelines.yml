trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

- script: |
    npm install
    opt=$(npm run affected:apps -- --base=origin/master~1 --head=origin/master)

    if [[ $opt == *"frontend"* ]]; then
      echo "Front end app need rebuild!"
      echo '##vso[task.setvariable variable=rebuildui]true'
    fi

    if [[ $opt == *"api"* ]]; then
      echo "API app need rebuild!"
      echo '##vso[task.setvariable variable=rebuildapi]true'
    fi
  displayName: 'check which app need rebuild'

- script: |
    npm run build frontend -- --prod
  displayName: 'build affected UI'
  condition: eq(variables.rebuildui, 'true')

- script: |
    npm run build api -- --prod
  displayName: 'build affected API'
  condition: eq(variables.rebuildapi, 'true')

- script: |
    docker build --rm -f "DockerfileUi" -t nvhoanganh1909/fullstack-ui:B$(Build.BuildId) .
  displayName: 'build UI docker image'
  condition: eq(variables.rebuildui, 'true')

- script: |
    docker build --rm -f "DockerfileApi" -t nvhoanganh1909/fullstack:B$(Build.BuildId) .
  displayName: 'build API docker image'
  condition: eq(variables.rebuildapi, 'true')

- script: |
    docker login -u nvhoanganh1909 -p $(dockerpwd)
    docker push nvhoanganh1909/fullstack-ui:B$(Build.BuildId)
  displayName: 'push UI image to dockerhub'
  condition: eq(variables.rebuildui, 'true')

- script: |
    docker login -u nvhoanganh1909 -p $(dockerpwd)
    docker push nvhoanganh1909/fullstack:B$(Build.BuildId)
  displayName: 'push API image to dockerhub'
  condition: eq(variables.rebuildapi, 'true')

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: 'dist/apps/api'
    includeRootFolder: true
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/API.zip'
    replaceExistingArchive: true
  displayName: 'archive API dist files'  
  condition: eq(variables.rebuildapi, 'true')  


- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: 'dist/apps/frontend'
    includeRootFolder: true
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/FrontEnd.zip'
    replaceExistingArchive: true
  displayName: 'archive Ui dist files'  
  condition: eq(variables.rebuildui, 'true')  

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: $(Build.ArtifactStagingDirectory)
    artifactName: MyBuildOutputs
  displayName: 'Publish artifacts'
  condition: or(eq(variables.rebuildapi, 'true'), eq(variables.rebuildui, 'true'))
